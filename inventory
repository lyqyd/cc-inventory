--inventory computer
--this program oversees the storage and retrieval of items in the storage system.

--initial configuration defaults
local config = {
	--inventory configuration file
	--in a north-facing setup (computer north of service holes), rows are east-west and columns are north-south.
	--facing is determined by which direction the center torch is from the computer.
	facing = 1,
	layers = 0,
	rows = 6,
	columns = 6,
	layout = {
		--layout coordinates start with 1, 1 in the upper-left.
		rows = {1, 3, 5, 7, 9, 11},
		layers = {
			--column coordinates.
			{1, 3, 5, 7, 9, 11},
			{2, 4, 6 ,8, 10, 12},
		},
		shafts = {
			--row coordinate first.
			{6, 5},
			{6, 7},
		},
		bases = {
			--bases along the outer walls for the item i/o interfaces.
			--row coordinate first.
			{1, 6},
			{7, 12},
			{12, 6},
			{7, 1},
		},
		--master coords used to transform gps coordinates and base coordinates for actual pick-up and drop-off coords.
		master = {7, 6},
		retrieve = {7, 7},
		store = {7, 5},
		main = {8, 6},
	},
	retrievalFlightDelay = 1,
	intakeFlightDelay = 0.6,
	storageBlocks = {
		{
			name = "minecraft:chest",
			slots = 27,
			slotSize = 64,
		},
	},
	locations = {},
	baseCode = "",
	databasePath = "/storagedata",
	counters = {},
	bases = {},
	storageSide = "right",
	retrievalSide = "left",
	quadSide = "back",
}

local directionNames = {"north", "east", "south", "west"}
local baseRotations = {
	{1, 2, 3, 4},
	{4, 1, 2, 3},
	{3, 4, 1, 2},
	{2, 3, 4, 1},
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("flight") then error("Could not load flight API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("inventory.conf") then
	config = configuration.load("inventory.conf")
else
	--initial setup
	print("Initial Setup for Master Storage Controller")
	base.setup(config, true, "Determine the direction by standing at this computer and looking toward the center torch.")
	
	local counters, bases

	local function grabRemotePeripherals(periph)
		local p = peripheral.call("bottom", "getNamesRemote")
		local r, n = {}, 0
		for i = 1, #p do
			if peripheral.getType(p[i]) == periph then
				n = n + 1
				r[n] = p[i]
			end
		end
		return r
	end

	repeat
		print("Finding counter peripherals.")
		if peripheral.getType("bottom") == "modem" then
			counters = grabRemotePeripherals("counter")
		else
			counters = {}
		end
		if #counters < 1 then
			print("Please attach at least one counter peripheral to the network.")
			sleep(5)
		elseif #counters > 4 then
			print("Too many counters on the network!  Please attach no more than 4 (one per outside wall).")
			sleep(5)
		end
	until #counters >= 1 and #counters <= 4
	for i = 1, #counters do
		print("Which wall is "..counters[i].." located on?")
		for i = 1, 4 do
			if not config.counters[i] then
				print(i..". "..directionNames[i])
			end
		end
		local answer
		repeat
			write("> ")
			answer = tonumber(read())
			if answer and config.counters[answer] == nil then
				config.counters[answer] = counters[i]
				break
			else
				answer = nil
			end
		until answer
	end
	repeat
		print("Finding quadracoptor base peripherals.")
		if peripheral.getType("bottom") == "modem" then
			bases = grabRemotePeripherals("quadbase")
		else
			bases = {}
		end
		print("Finding quadracoptor base peripherals.")
		peripheral.find("quadbase", b)
		if #bases ~= #counters then
			print("Please attach to the network one quadracoptor base for each counter peripheral.")
			sleep(5)
		end
	until #bases == #counters
	for i = 1, #bases do
		print("Which wall is "..bases[i].." located on?")
		for i = 1, 4 do
			if config.counters[i] and not config.bases[i] then
				print(i..". "..directionNames[i])
			end
		end
		local answer
		repeat
			write("> ")
			answer = tonumber(read())
			if answer and config.counters[answer] and config.bases[answer] == nil then
				config.bases[answer] = bases[i]
				break
			else
				answer = nil
			end
			print("Please select a valid option.")
		until answer
	end
	do
		local masterVec = vector.new(config.layout.master[1], 0, config.layout.master[2])
		local transformVec = {
			{vector.new(-2, 0, 1), vector.new(-2, 0, -1)},
			{vector.new(1, 0, 2), vector.new(-1, 0, 2)},
			{vector.new(2, 0, -1), vector.new(2, 0, 1)},
			{vector.new(-1, 0, -2), vector.new(1, 0, -2)},
		}
		local facingVec = {
			vector.new(1, 0, 1),
			vector.new(-1, 0, 1),
			vector.new(-1, 0, -1),
			vector.new(1, 0, -1),
		}
		for i = 1, 4 do
			if config.layout.bases[i] then
				local baseVec = vector.new(config.layout.bases[i][1], 0, config.layout.bases[i][2])
				local inVec = baseVec - masterVec + transformVec[i][1]
				local outVec = baseVec - masterVec + transformVec[i][2]
				if config.facing == 1 or config.facing == 3 then
					inVec = vector.new(inVec.z, 0, inVec.x)
					outVec = vector.new(outVec.z, 0, outVec.x)
				end
				fVec = facingVec[config.facing]
				inVec = vector.new(inVec.x * fVec.x, inVec.y * fVec.y, inVec.z * fVec.z)
				outVec = vector.new(outVec.x * fVec.x, outVec.y * fVec.y, outVec.z * fVec.z)
				config.locations[baseRotations[config.facing][i]] = {
					{location = config.location + inVec, capabilities = "accept-items"},
					{location = config.location + outVec, capabilities = "output-items"},
				}
			end
		end
	end
	configuration.save("inventory.conf", config)
end
if not os.loadAPI("storage") then error("Could not load storage API!") end
storage.initialize(config)

local counterLookup, baseLookup = {}, {}
for i = 1, 4 do
	if config.counters[i] then
		counterLookup[config.counters[i]] = i
	end
	if config.bases[i] then
		counterLookup[config.bases[i]] = i
	end
end

peripheral.find("modem", function(name) rednet.open(name) end)

local itemsStored = 0
local construction
local clients = {}
local routeQueue = {}
--intake and retrieve are flight queues.
local queues = {
	intake = {},
	output = {},
	retrieve = flight.queue("back", config.retrievalFlightDelay),
	store = flight.queue("back", 0),
	request = {{}, {}, {}, {}},
	surplus = {{}, {}, {}, {}},
}
expose = queues

queues.intake.dispatch - function(self)
	local info
	for i = 1, #self.queue do
		info = self.queue[i]
		local count = peripheral.call(info.side, "getQuadCount")
		if count < 1 then
			os.queueEvent("no_quads", info.side)
		elseif count < self.low then
			os.queueEvent("low_quads", info.side)
			table.remove(self.queue, i)
			break
		else
			table.remove(self.queue, i)
			break
		end
	end
	peripheral.call(info.side, "flyQuad", info.route)
	--allow an additional timer event to space out the next flight, even if we've just emptied the queue.
	self.timer = os.startTimer(self.spacing)
	return "route_depart", info.side, info
end

for i = 1, 4 do
	if config.bases[i] then
		queues.intake[i] = flight.queue(config.bases[i], config.intakeFlightDelay)
		queues.output[i] = flight.queue(config.bases[i], 0)
	end
end

local flightQueueTimer = os.startTimer(0)

local direction = {
	--facing north
	{"north", "east", "south", "west"},
	--facing east
	{"east", "south", "west", "north"},
	--facing south
	{"south", "west", "north", "east"},
	--facing west
	{"west", "north", "east", "south"},
}

local function queueFlight(route, queue)
	table.insert(queue, route)
	if not queue.timer then queue.timer = os.startTimer(0) end
end

local function checkRemainingSpace()
	if itemsStored <= 30 then return end
	if storage.getSlotsRemaining() < 120 then
		local construction = base.getClientByType("construction_online")
		if construction then
			rednet.send(construction, {event = "build_layer", origin = {x = 0, y = config.layers + 7, z = 0, h = 1}, layer = {x = 0, y = 1, z = 0, h = 1}}, "lyq-inv")
		end
	end
	itemsStored = 0
end

local stationInfo = {
	type = "items-inventory",
	locations = {},
}

for i = 1, 4 do
	if config.layout.bases[i] then
		table.insert(stationInfo.locations, config.locations[i][1])
		table.insert(stationInfo.locations, config.locations[i][2])
	end
end

local clientProtocol = {
	protocol = "lyq-inv",
	name = {
		construction_online = "Construction turtle",
	},
	online = {
		construction_online = true,
	},
	offline = {
		construction_offline = true,
	},
	list = clients,
}

base.initialize(config.baseCode, stationInfo, nil, clientProtocol)
base.addFlightBase(queues.retrieve)
base.addFlightBase(queues.store)
for i = 1, 4 do
	if queues.intake[i] then
		base.addFlightBase(queues.intake[i])
		base.addFlightBase(queues.output[i])
	end
end

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "rednet_message" then
		if event[4] == "lyq-inv" then
			local message = event[3]
			if message.type == "layer_complete" then
				config.layers = config.layers + 2
				configuration.save("master.conf", config)
				storage.addLayers(message.block, 2)
			end
		elseif event[4] == "lyq-base-inv" and event[3].baseCode == config.baseCode then
			local message = event[3]
			if message.type == "item_count" then
				rednet.send(event[2], {type = "item_quantity", object = {class = "item", name = message.name, damage = message.damage, count = storage.getItemCount(message.name, message.damage)), baseCode = config.baseCode}, "lyq-base-inv")
			elseif message.type == "all_items" then
				rednet.send(event[2], {type = "all_items_info", info = storage.getAllItemCounts(), baseCode = config.baseCode}, "lyq-base-inv")
			elseif message.type == "create_surplus" then
				local itemData = message.objectInfo
				local queueMin, queueChoice = math.huge, -1
				for i = 1, 4 do
					local count = 0
					for j = 1, #queues.surplus[i] do
						count = count + queues.surplus[i][j].count
					end
					if count < queueMin then
						queueMin = count
						queueChoice = i
					end
				end
				itemData.total = itemData.count
				table.insert(queues.surplus[queueChoice], itemData)
				print("Retrieving "..tostring(itemData.count).." of "..itemData.name.."-"..itemData.damage)
				local success, count = storage.retrieve(itemData, function(route) queues.retrieve:add({route = route}) end)
				if not success then
					print("Couldn't retrieve "..count.." items.")
					local queueInfo = queues.surplus[queueChoice][#queues.surplus[queueChoice]]
					queueInfo.count = queueInfo.count - count
					if queueInfo.count == 0 then
						queues.surplus[queueChoice][#queues.surplus[queueChoice]] = nil
					end
				end
			elseif message.type == "create_request" then
				local itemData = message.object
				local queueMin, queueChoice = math.huge, -1
				for i = 1, 4 do
					local count = 0
					for j = 1, #queues.request[i] do
						count = count + queues.request[i][j].count
					end
					if count < queueMin then
						queueMin = count
						queueChoice = i
					end
				end
				table.insert(queues.request[queueChoice], itemData)
				base.sendToBaseMaster({type = "object_required", object = itemData, location = config.locations[queueChoice][1].location, crafting = "none", baseCode = config.baseCode}, "lyq-base")
			elseif message.type == "free_space" then
				rednet.send(event[2], {type = "free_space_count", info = storage.getSpaceRemaining(), baseCode = config.baseCode}, "lyq-base-inv")
			elseif message.type == "free_slots" then
				rednet.send(event[2], {type = "free_slots_count", info = storage.getSlotsRemaining(), baseCode = config.baseCode}, "lyq-base-inv")
			elseif message.type == "unused_layers" then
			elseif message.type == "item_density" then
				rednet.send(event[2], {type = "item_density_percent", info = storage.calculateItemDensity(), baseCode = config.baseCode}, "lyq-base-inv")
			end
		end
	elseif event[1] == "item_count" then
		local side, name, damage, count = event[2], event[3], event[4], event[5]
		if side == config.storageSide then
			print("Storing "..tostring(count).." of "..name.."-"..damage)
			storage.store({name = name, damage = damage, count = count}, function(route) queues.store:add({route = route}) end)
			itemsStored = itemsStored + 1
			checkRemainingSpace()
		elseif event[2] == config.retrievalSide then
			print("Retrieved "..tostring(count).." of "..name.."-"..damage)
			local found = false
			for j = 1, math.max(#queues.surplus[1], #queues.surplus[2], #queues.surplus[3], #queues.surplus[4]) do
				for i = 1, 4 do
					local info = queues.surplus[i][j]
					if info and info.name == name and info.damage == damage and (info.count == count or (info.count > 64 and count == 64) or count == info.count % 64) then
						info.count = info.count - count
						local route = storage.createOutputRoute(i)
						queues.output[i]:add({route = route})
						if info.count == 0 then
							table.remove(queues.surplus[i], j)
							base.sendToBaseMaster({type = "object_surplus", object = {class = "item", name = info.name, damage = info.damage, count = info.total}, location = config.locations[i][2].location})
						end
						found = true
						break
					end
				end
				if found then break end
			end
		else
			--one of the intake sides
			local side = counterLookup[side]
			print("Storing "..tostring(count).." of "..name.."-"..damage)
			storage.store({name = name, damage = damage, count = count}, side, function(route) queues.intake[side]:add({route = route}) end)
			itemsStored = itemsStored + 1
			checkRemainingSpace()
			if #queues.request[side] > 0 then
				for i = 1, #queues.request[side] do
					local info = queues.request[side][i]
					if info and info.name == name and info.damage == damage and (info.count == count or (info.count > 64 and count == 64) or count == info.count % 64)  then
						info.count = info.count - count
						if info.count == 0 then
							table.remove(queues.request[side], i)
						end
						break
					end
				end
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
