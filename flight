--flight api
local unpack = unpack or table.unpack

local shortFlightDistance = 6
local stepDistance = 48

local directions = {
	x = {
		[1] = "east",
		[-1] = "west",
	},
	y = {
		[1] = "up",
		[-1] = "down",
	},
	z = {
		[1] = "south",
		[-1] = "north",
	},
}

local flightLevels = {
	north = 92,
	east = 93,
	south = 93,
	west = 92,
}

local function horizontalDistance(a, b)
	return math.sqrt((b.x - a.x)^2 + (b.z - a.z)^2)
end

local function concatenate(a, b)
	--fast table concatenation, appends the numerically-indexed contents of b to a.
	local n = #a
	for i = 1, #b do
		a[n + i] = b[i]
	end
	return #a
end

local function getDirections(a, b)
	local xDir = b.x - a.x
	local xName = directions.x[xDir / math.abs(xDir)]
	local zDir = b.z - a.z
	local zName = directions.z[zDir / math.abs(zDir)]
	if math.abs(xDir) >= math.abs(zDir) then
		return xName, math.abs(xDir), zName, math.abs(zDir)
	else
		return zName, math.abs(zDir), xName, math.abs(xDir)
	end
end

local function pointToPoint(a, b)
	local height = a.y
	local route, n = {}, 0
	local info = {short = {total = 0}, long = {total = 0}}
	info.long.name, info.long.dist, info.short.name, info.short.dist = getDirections(a, b)
	local longFlight = horizontalDistance(a, b) > shortFlightDistance
	if longFlight then
		local steps = math.ceil(info.long.dist / stepDistance)

		local function adjustHeight(dirName, curHeight)
			local delta = 0
			if curHeight ~= flightLevels[dirName] then
				delta = flightLevels[dirName] - curHeight
				n = n + 1
				route[n] = directions.y[delta / math.abs(delta)].." "..tostring(math.abs(delta))
			end
			return curHeight + delta
		end

		local function step(info, _dist)
			local dist = _dist or math.floor(info.dist / steps)
			if dist > 0 then
				height = adjustHeight(info.name, height)
				n = n + 1
				route[n] = info.name.." "..tostring(dist)
				info.total = info.total + dist
			end
		end
		
		for i = 1, steps do
			if i == steps then
				step(info.long, info.long.dist - info.long.total)
				step(info.short, info.short.dist - info.short.total)
			else
				step(info.long)
				step(info.short)
			end
		end

		if height ~= b.y then
			local delta = b.y - height
			n = n + 1
			route[n] = directions.y[delta / math.abs(delta)].." "..tostring(math.abs(delta))
		end
	else
		local flyHeight = math.max(a.y, b.y)
		if flyHeight > a.y then
			n = n + 1
			route[n] = directions.y[1].." "..tostring(flyHeight - a.y)
		end
		if info.long.dist > 0 then
			n = n + 1
			route[n] = info.long.name.." "..tostring(info.long.dist)
		end
		if info.short.dist > 0 then
			n = n + 1
			route[n] = info.short.name.." "..tostring(info.short.dist)
		end
		if flyHeight > b.y then
			n = n + 1
			route[n] = directions.y[-1].." "..tostring(flyHeight - b.y)
		end
	end
	return route
end

function route(a, b, c, d, count, filter)
	if not d then d = a end
	local route = pointToPoint(a, b)
	local n = #route
	if filter then
		n = n + 1
		route[n] = "filter "..filter
	end
	n = n + 1
	if count then
		route[n] = "suck "..count
	else
		route[n] = "suck"
	end
	n = concatenate(route, pointToPoint(b, c))
	n = n + 1
	route[n] = "drop"
	n = concatenate(route, pointToPoint(c, d))
	return route
end

local function tickFlights(self)
	if #self.queue > 0 then
		if not self.blocked then
			return self:dispatch()
		else
			self.timer = -1
		end
	else
		self.timer = -1
	end
end

local Queue = {
	handleEvents = function(self, ...)
		local event = {...}
		if event[1] == "timer" and event[2] == self.timer then
			result = {tickFlights(self)}
			if #result > 0 then
				return unpack(result)
			end
		end
		return unpack(event)
	end,
	add = function(self, routeInfo)
		table.insert(self.queue, routeInfo)
		if self.timer == -1 then
			--this can be safely set for immediate expiration, since the timer following our last flight has expired.
			self.timer = os.startTimer(0)
		end
	end,
	block = function(self)
		--blocks dispatching of new flights until unblocked
		self.blocked = true
	end,
	unblock = function(self)
		--unblocks dispatching of new flights, dispatches a flight if timer expired
		self.blocked = false
		if self.timer == -1 then
			local result = {tickFlights(self)}
			if #result > 0 then
				os.queueEvent(unpack(result))
			end
		end
	end,
}

local queueMeta = {__index = Queue}

function queue(side, time, threshold)
	local obj = setmetatable({}, queueMeta)
	obj.timer = -1
	obj.queue = {}
	obj.side = side
	obj.blocked = false
	obj.spacing = time or 0.8
	obj.low = threshold or 4
	obj.dispatch = function(self)
		local count = peripheral.call(self.side, "getQuadCount")
		if count < 1 then
			self.timer = os.startTimer(self.spacing)
			return "no_quads", self.side
		elseif count < self.low then
			os.queueEvent("low_quads", self.side)
		end
		local info = table.remove(self.queue, 1)
		peripheral.call(self.side, "flyQuad", info.route)
		--allow an additional timer event to space out the next flight, even if we've just emptied the queue.
		self.timer = os.startTimer(self.spacing)
		return "route_depart", self.side, info
	end
	return obj
end
