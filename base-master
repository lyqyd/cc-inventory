--master computer
--this program oversees the storage and retrieval of items in the storage system.

--initial configuration defaults
local config = {
	-- base master configuration file
	maxFlightQuantity = {
		item = 64,
		fluid = 1000,
	},
	tick = {
		transport = 0.5,
	},
	baseCode = "",
	databasePath = "/basedata",
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("flight") then error("Could not load flight API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("base.conf") then
	config = configuration.load("base.conf")
else
	--initial setup
	print("Initial Setup for Master Base Controller")
	base.setup(config)
	configuration.save("base.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

if os.getComputerLabel() then
	rednet.host("lyq-base", os.getComputerLabel())
else
	print("You must label this computer first.")
	return
end

local stations = {}
local stationInfo = {} --keyed by computer ID.
local surplus = {} --keyed into groups (item, fluid), then by identifier (item name-damage, etc), then by station ID; list of locations.
local request = {} --keyed into groups (item, fluid), then by identifier (item name-damage, etc), then by station ID; list of locations.
local flights = {item = {}, fluid = {}} --keyed into groups (item, fluid), then by station ID, then numerically-indexed with location, queue, count, and delta keys.
local flightLookup = {}
local flightID = 0 --incremented for each flight, is unique base-wide
local storage = {item = {}, fluid = {}} --keyed into groups (item, fluid), then by station ID, then by name, then by damage, value is quantity of that object.
baseParameters = {
	stationInfo = stationInfo,
	surplus = surplus,
	request = request,
	flights = flights,
	flightLookup = flightLookup,
	storage = storage,
}

local clientProtocol = {
	protocol = "lyq-base",
	name = {station_online = "Station"},
	online = {station_online = true},
	offline = {station_offline = true},
	list = stations,
}

base.initialize(config.baseCode, nil, nil, clientProtocol, true)

local function getDistance(a, b)
	return math.sqrt((b.x - a.x)^2 + (b.y - a.y)^2 + (b.z - a.z)^2)
end

local function areLocationsEqual(a, b)
	return a.x == b.x and a.y == b.y and a.z == b.z
end

local keywords = {
	stations = {
		flightOnly = "flight-base",
		storage = {
			item = "items-inventory",
			fluid = "fluids-inventory",
		},
	},
	capabilities = {
		flight = {
			item = "fly-quad-items",
			fluid = "fly-quad-fluids",
		},
		accept = {
			item = "accept-items",
			fluid = "accept-fluids",
		},
	},
}

local keywordLookup = {}

for class, words in pairs(keywords) do
	keywordLookup[class] = {}
	for word, types in pairs(words) do
		if type(types) == "table" then
			keywordLookup[class][word] = {}
			for obj, name in pairs(types) do
				keywordLookup[class][word][name] = obj
			end
		end
	end
end

local function getBestBase(obj, id)
	local bases = stationInfo[id].capabilities[keywords.capabilities.flight[obj]]
	if #bases > 1 then
		local flightBases = flights[obj][id]
		table.sort(flightBases, function(a, b) return (a.count - #a.queue) < (b.count - #b.queue) end)
		if flightBases[#flightBases].count - #flightBases[#flightBases].queue > 0 then
			return flightBases[#flightBases]
		end
	elseif #bases == 1 and flights[obj][id][1].count - #flights[obj][id][1].queue > 0 then
		return flights[obj][id][1]
	end
	return false
end

local function chooseFlightBase(obj, from, to)
	local str = keywords.capabilities.flight[obj]
	if stationInfo[from.id].capabilities[str] then
		local fBase = flights[obj][from.id]
		if fBase.count - #fBase.queue > 0 then
			return from.id, getBestBase(obj, from.id)
		end
	elseif stationInfo[to.id].capabilities[str] then
		local fBase = flights[obj][to.id]
		if fBase.count - #fBase.queue > 0 then
			return to.id, getBestBase(obj, to.id)
		end
	else
		local options = {}
		for i, info in pairs(stationInfo) do
			if info.type == keywords.stations.flightOnly then
				for _, baseInfo in ipairs(flights[obj][i]) do
					if baseInfo.count - #baseInfo.queue > 0 then
						table.insert(options, {id = i, base = baseInfo, distance = getDistance(from.location, baseInfo.location)})
					end
				end
			end
		end
		table.sort(options, function(a,b) return a.distance < b.distance end)
		return options[1].id, options[1].base
	end
end

local function queueFlight(object, origin, destination)
	local object = base.fillObjectData(object)
	local flightStation, base = chooseFlightBase(object.class, origin, destination)
	local total = 0
	while object.count > 0 do
		if not base then break end
		local count = math.min(object.count, config.maxFlightQuantity[object.class])
		local route = flight.route(base.location, origin.location, destination.location, nil, count, object.name.." "..object.damage)
		flightID = flightID + 1
		local newInfo = {class = object.class, name = object.name, damage = object.damage, count = count}
		table.insert(base.queue, {id = flightID, route = route, origin = origin, destination = destination, object = newInfo})
		flightLookup[flightID] = base
		object.count = object.count - count
		total = total + count
		if base.count < #base.queue + 1 then
			--if the base we're using runs out of quadracoptors, use a different base.
			flightStation, base = chooseFlightBase(object.class, origin, destination)
		end
	end
	return total
end

local function fulfillRequestsFromSurplus()
	--this is how everything moves, inventory systems create surplus and request entries as necessary.
	for type, names in pairs(request) do
		if surplus[type] then
			for name, stationList in pairs(names) do
				if surplus[type][name] then
					--create request list for this item.
					local requesters = {limited = {}, infinite = {}}
					for id, list in pairs(stationList) do
						for _, info in ipairs(list) do
							if info.count == true then
								table.insert(requesters.infinite, {id = id, location = info.location, ref = info})
							else
								table.insert(requesters.limited, {id = id, location = info.location, ref = info})
							end
						end
					end
					table.sort(requesters.limited, function(a,b) return a.count < b.count end)
					--now match surpluses to requests.
					--create surplus list for this item.
					local surpluses = {}
					for id, list in pairs(surplus[type][name]) do
						for _, info in ipairs(list) do
							table.insert(surpluses, {id = id, location = info.location, ref = info})
						end
					end
					table.sort(surpluses, function(a,b) return a.count < b.count end)
					for i, info in ipairs(surpluses) do
						while info.ref.count > 0 do
							if #requesters.limited > 0 then
								local requestInfo = requesters.limited[1]
								local count = math.min(info.ref.count, requestInfo.ref.count)
								local total = queueFlight({class = type, hash = name, count = count}, {id = info.id, location = info.location}, {id = requestInfo.id, location = requestInfo.location})
								info.ref.count = info.ref.count - total
								info.ref.flag = nil
								requestInfo.ref.count = requestInfo.ref.count - total
								if requestInfo.ref.count == 0 then
									table.remove(requesters.limited, 1)
								end
							elseif #requesters.infinite > 0 then
								table.sort(requesters.infinite, function(a,b) return a.total < b.total end)
								local requestInfo = requesters.infinite[1]
								local count = math.min(info.ref.count, 64)
								local total = queueFlight({class = type, hash = name, count = count}, {id = info.id, location = info.location}, {id = requestInfo.id, location = requestInfo.location})
								info.ref.count = info.ref.count - total
								requestInfo.ref.total = requestInfo.ref.total + total
							else
								--no more requesters.
								break
							end
						end
					end
				end
			end
		end
	end
end

local function storeSurplus()
	--to store surplus in inventory, we create matching requests at the inventory's intake interfaces.
	for objType, names in pairs(surplus) do
		for _name, stationList in pairs(names) do
			for id, list in pairs(stationList) do
				for _, info in ipairs(list) do
					if info.count > 0 and not info.flag then
						--select a storage facility and instruct it to request the objects.
						local highCount, stationID = 0, -1
						local object = base.fillObjectData({class = objType, hash = _name})
						for inv, stoInfo in pairs(storage[objType]) do
							--pick the facility with the most of the item already in storage.
							if stoInfo[name] and stoInfo[object.name][object.damage] and stoInfo[object.name][object.damage] > highCount then
								highCount = stoInfo[object.name][object.damage]
								stationID = inv
							end
						end
						if stationID == -1 then
							--no storage facility has any yet, so select the closest,
							local lowDistance = math.huge
							for i, staInfo in pairs(stationInfo) do
								if staInfo.type == keywords.stations.storage[objType] then
									for j, loc in ipairs(staInfo.locations) do
										if string.find(loc.capabilities, keywords.capabilities.accept[objType], 1, true) then
											local distance = getDistance(info.location, loc.location)
											if distance < lowDistance then
												lowDistance = distance
												stationID = i
											end
										end
									end
								end
							end
						end
						if stationID == -1 then
							--failure to find a storage facility
						else
							object.count = info.count
							print("Creating request for "..tostring(object.count).." of "..object.name.."-"..tostring(object.damage))
							rednet.send(stationID, {type = "create_request", object = object, baseCode = config.baseCode}, "lyq-base-inv")
							--flag this surplus as destined for storage, so we don't attempt to store it again.
							info.flag = true
						end
					end
				end
			end
		end
	end
end

local function fillRequests()
	--to fill request from inventory, we create matching surpluses at the inventory's output interfaces.
	for objType, names in pairs(request) do
		for _name, stationList in pairs(names) do
			for id, list in pairs(stationList) do
				for _, info in ipairs(list) do
					if info.count > 0 and not  info.flag then
						--select a storage facility and instruct it to surplus the objects.
						local total = 0
						if info.crafting == "none" or info.crafting == "allow" then
							while info.count == true or total < info.count do
								local lowCount, stationID = math.huge, -1
								local object = base.fillObjectData({class = objType, hash = _name})
								for inv, stoInfo in pairs(storage[objType]) do
									--pick the facility with the lowest quantity of the item in storage.
									if stoInfo[object.name] then
										local objectCount = stoInfo[object.name][object.damage]
										if objectCount < lowCount and objectCount > 0 then
											lowCount = objectCount
											stationID = inv
										end
									end
								end
								if info.count ~= true then
									lowCount = math.min(lowCount, info.count - total)
								else
									--build in a little safety for infinite consumers.
									lowCount = math.min(lowCount, 64)
								end
								if stationID == -1 then
									--failure to find a storage facility
									break
								else
									print("Creating surplus of "..tostring(lowCount).." of "..name.."-"..tostring(damage))
									object.count = lowCount
									rednet.send(stationID, {type = "create_surplus", object = object, baseCode = config.baseCode}, "lyq-base-inv")
									total = total + lowCount
									--more infinite consumer safety
									if info.count == true then break end
								end
							end
						end
						--if we couldn't find any, craft some (if we're allowed to do that)
						if total == 0 and (info.crafting == "allow" or info.crafting == "require") then
							for id, staInfo in pairs(stationInfo) do
								if staInfo.type == "crafting-master" then
									local count = info.count == true and 64 or info.count
									local object = base.fillObjectData({class = objType, hash = _name})
									object.count = count
									print("Crafting "..tostring(object.count).." of "..object.name.."-"..tostring(object.damage))
									rednet.send(id, {type = "craft_object", object = object, baseCode = config.baseCode}, "lyq-base-craft")
									break
								end
							end
						end
						if total == info.count then
							info.flag = true
						end
					end
				end
			end
		end
	end
end

local function trimTables()
	local function remove(tab, list)
		local ref
		for i = #list, 1, -1 do
			ref = tab
			for j = 1, #list[i] - 1 do
				ref = ref[list[i][j]]
			end
			print(#list[i], list[i][#list[i]])
			ref[list[i][#list[i]]] = nil
		end
	end

	local function iterate(tab)
		local toRemove = {}
		for objType, names in pairs(tab) do
			local objEmpty = true
			for _name, stationList in pairs(names) do
				local nameEmpty = true
				for id, list in pairs(stationList) do
					local idEmpty = true
					for i = #list, 1, -1 do
						local info = list[i]
						if info.count ~= true and info.count == 0 then
							table.remove(list, i)
						else
							idEmpty = false
						end
					end
					if idEmpty then
						table.insert(toRemove, {objType, _name, id})
					else
						nameEmpty = false
					end
				end
				remove(tab, toRemove)
				toRemove = {}
				if nameEmpty then
					table.insert(toRemove, {objType, _name})
				else
					objEmpty = false
				end
			end
			remove(tab, toRemove)
			toRemove = {}
		end
	end

	iterate(request)
	iterate(surplus)
end

local function dispatchFlights()
	for obj, stationList in pairs(flights) do
		for id, bases in pairs(stationList) do
			for _, base in ipairs(bases) do
				for _, info in ipairs(base.queue) do
					rednet.send(id, {type = "fly_route", id = info.id, route = info.route, location = base.location, baseCode = config.baseCode}, "lyq-base")
				end
				base.queue = {}
			end
		end
	end
end

tickTransport = os.startTimer(config.tick.transport)

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "rednet_message" then
		local message = event[3]
		if event[4] == "lyq-base" and message.baseCode == config.baseCode then
			if message.type == "station_info" then
				local id = event[2]
				if not stationInfo[id] then
					stationInfo[id] = {
						locations = message.info,
						capabilities = {},
						type = message.stationType,
					}
				else
					stationInfo[id].locations = message.info
					stationInfo[id].capabilities = {}
					stationInfo[id].type = message.stationType
				end
				local info = stationInfo[id]
				for i, loc in ipairs (info.locations) do
					for match in string.gmatch(loc.capabilities, "(%S+)") do
						if not info.capabilities[match] then
							info.capabilities[match] = {loc.location}
						else
							table.insert(info.capabilities[match], loc.location)
						end
						if keywordLookup.capabilities.flight[match] then
							local objectType = keywordLookup.capabilities.flight[match]
							if not flights[objectType] then flights[objectType] = {} end
							if not flights[objectType][id] then flights[objectType][id] = {} end
							local found = false
							for j, info in ipairs(flights[objectType][id]) do
								if areLocationsEqual(info.location, loc) then
									found = true
									break
								end
							end
							if not found then
								table.insert(flights[objectType][id], {location = loc.location, queue = {}, count = 0, delta = 0})
							end
						end
					end
				end
				--see if this station is a storage station, grab the list of contents if it is
				local storageKeyword = keywordLookup.stations.storage[message.stationType]
				if storageKeyword == "item" then
					rednet.send(event[2], {type = "all_items", baseCode = config.baseCode},"lyq-base-inv")
				elseif storageKeyword == "fluid" then
					--fluids lookup
				end
				io.write("Station "..tostring(event[2]).." has capabilities: ")
				for label in pairs(info.capabilities) do
					io.write(label.." ")
				end
				io.write("\n")
			elseif message.type == "object_surplus" then
				--a station has too much of something.
				local object = base.fillObjectData(message.object)
				if object then
					if not surplus[object.class] then surplus[object.class] = {} end
					if not surplus[object.class][object.hash] then surplus[object.class][object.hash] = {} end
					if not surplus[object.class][object.hash][event[2]] then surplus[object.class][object.hash][event[2]] = {} end
					local list = surplus[object.class][object.hash][event[2]]
					local found = false
					if #list > 0 then
						local loc = message.location
						for i = 1, #list do
							local listLoc = list[i].location
							if areLocationsEqual(listLoc, loc) then
								--add these, since stations send surplus messages whenever they dump something for pickup.
								write("Updating surplus of "..object.name)
								list[i].count = list[i].count + object.count
								print(" to "..tostring(list[i].count))
								found = true
								break
							end
						end
					end
					if not found then
						print("Recording surplus of "..tostring(object.count).." of "..object.name.."-"..object.damage)
						table.insert(list, {location = message.location, count = object.count})
					end
				end
			elseif message.type == "object_required" then
				--a station has too little of something.
				local object = base.fillObjectData(message.object)
				if object then
					if not request[object.class] then request[object.class] = {} end
					if not request[object.class][object.hash] then request[object.class][object.hash] = {} end
					if not request[object.class][object.hash][event[2]] then request[object.class][object.hash][event[2]] = {} end
					local list = request[object.class][object.hash][event[2]]
					local found = false
					local info
					if #list > 0 then
						local loc = message.location
						for i = 1, #list do
							local listLoc = list[i].location
							if areLocationsEqual(listLoc, loc) then
								--update these, since stations update these as they change.
								list[i].count = object.count
								list[i].crafting = message.crafting or list[i].crafting
								info = list[i]
								found = true
								break
							end
						end
					end
					if not found then
						print("Recording request of "..tostring(object.count).." of "..object.name.."-"..object.damage)
						table.insert(list, {location = message.location, count = object.count, crafting = message.crafting})
						info = list[#list]
					end
					if info.count == true and not info.total then
						info.total = 0
					end
					if not info.crafting then
						if info.count == true then
							info.crafting = "none"
						else
							info.crafting = "allow"
						end
					end
				end
			elseif message.type == "flight_base_info" then
				for id, info in pairs(stationInfo) do
					for _, loc in ipairs(info.locations) do
						if areLocationsEqual(message.info.location, loc.location) then
							local word = keywordLookup.capabilities.flight[loc.capabilities]
							if word then
								if not flights[word][event[2]] then flights[word][event[2]] = {} end
								local found = false
								for baseNum, baseInfo in ipairs(flights[word][event[2]]) do
									if areLocationsEqual(message.info.location, baseInfo.location) then
										baseInfo.count = message.info.count
										found = true
										break
									end
								end
								if not found then
									table.insert(flights[word][event[2]], message.info)
									break
								end
							end
						end
					end
				end
			elseif message.type == "flight_dispatched" then
				local baseInfo = flightLookup.id
				if baseInfo then
					baseInfo.count = baseInfo.count - 1
				end
			elseif message.type == "flight_arrived" then
				local loc = message.location
				local found = false
				for type, ids in pairs(flights) do
					for id, bases in pairs(ids) do
						for i, info in ipairs(bases) do
							if areLocationsEqual(info.location, loc) then
								info.count = info.count + 1
								found = true
								break
							end
						end
						if found then break end
					end
					if found then break end
				end
			end
		elseif event[4] == "lyq-base-inv" and message.baseCode == config.baseCode then
			if message.type == "all_items_info" then
				storage.item[event[2]] = message.info
			end
		end
	elseif event[1] == "timer" then
		if event[2] == tickTransport then
			fulfillRequestsFromSurplus()
			storeSurplus()
			fillRequests()
			trimTables()
			dispatchFlights()
			tickTransport = os.startTimer(config.tick.transport)
		end
	elseif event[1] == "terminate" then
		io.write("Stopping\n")
		return
	end
end
