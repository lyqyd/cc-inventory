--sorting computer

local config = {
	counters = {},
	bases = {},
	baseCode = "",
}

local directionNames = {"north", "east", "south", "west"}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end

if fs.exists("sorting.conf") then
	config = configuration.load("sorting.conf")
else
	print("Initial Setup for Sorting Controller")
	local counters, bases
	local function c(name)
		table.insert(counters, name)
	end
	local function b(name)
		table.insert(bases, name)
	end
	repeat
		counters = {}
		print("Finding counter peripherals.")
		peripheral.find("counter", c)
		if #counters < 1 then
			print("Please attach at least one counter peripheral to the network.")
			sleep(5)
		elseif #counters > 4 then
			print("Too many counters on the network!  Please attach no more than 4 (one per outside wall).")
			sleep(5)
		end
	until #counters >= 1 and #counters <= 4
	for i = 1, #counters do
		print("Which wall is "..counters[i].." located on?")
		for i = 1, 4 do
			if not config.counters[i] then
				print(i..". "..directionNames[i])
			end
		end
		local answer
		repeat
			answer = tonumber(read())
			if answer and config.counters[answer] == nil then
				config.counters[answer] = counters[i]
				break
			else
				answer = nil
			end
		until answer
	end
	repeat
		bases = {}
		print("Finding quadracoptor base peripherals.")
		peripheral.find("quadbase", b)
		if #bases ~= #counters then
			print("Please attach to the network one quadracoptor base for each counter peripheral.")
			sleep(5)
		end
	until #bases == #counters
	for i = 1, #bases do
		print("Which wall is "..bases[i].." located on?")
		for i = 1, 4 do
			if config.counters[i] and not config.bases[i] then
				print(i..". "..directionNames[i])
			end
		end
		local answer
		repeat
			write("? ")
			answer = tonumber(read())
			if answer and config.counters[answer] and config.bases[answer] == nil then
				config.bases[answer] = bases[i]
				break
			else
				answer = nil
			end
			print("Please select a valid option.")
		until answer
	end
	while true do
		print("What is the name code for this base?")
		print("Base name codes are used to group and differentiate sites.")
		write("> ")
		local baseCode = read()
		if baseCode and #baseCode > 0 then
			config.baseCode = baseCode
			break
		else
			print("A base name code is required!")
		end
	end
	configuration.save("sorting.conf", config)
end

local counterLookup, baseLookup = {}, {}
for i = 1, 4 do
	if config.counters[i] then
		counterLookup[config.counters[i]] = i
	end
	if config.bases[i] then
		counterLookup[config.bases[i]] = i
	end
end

peripheral.find("modem", function(name) rednet.open(name) end)

local serviceProtocol = {
	protocol = "lyq-inv",
	name = "inventory",
	online = "sorting_online",
	offline = "sorting_offline",
}

base.initialize(config.baseCode, nil, serviceProtocol, nil, true)

while true do
	local event = {os.pullEventRaw()}
	if event[1] == "item_count" then
		rednet.send(master, {type = "item_arrived", side = counterLookup[event[2]], info = {name = event[3], damage = event[4], count = event[5]}}, "lyq-inv")
	elseif event[1] == "rednet_message" and event[4] == "lyq-inv" then
		if event[2] == master then
			if event[3].type == "fly_route" then
				local side = table.remove(event[3].route, 1)
				peripheral.call(config.bases[side], "flyQuad", event[3].route)
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
