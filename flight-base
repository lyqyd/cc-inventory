--flight base
--this is a station that only flies quadracoptors.
--default setup is one quad base on top of the computer, but it could be manually configured to support as many bases as desired.

--initial configuration defaults
local config = {
	--flight base configuration file
	baseCode = "",
	location = nil,
	locations = {},
	dispatchDelay = 0.8,
}

local slotMap = {5, 6, 7, 9, 10, 11, 13, 14, 15}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("flight") then error("Could not load flight API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("flight.conf") then
	config = configuration.load("flight.conf")
else
	--initial setup
	print("Initial Setup for Flight Base")
	base.setup(config, true)
	local objectType
	do
		repeat
			io.write("What type of object do this station's quadracoptors transport?\n")
			io.write("item, fluid\n")
			objectType = io.read()
		until objectType == "item" or objectType == "fluid"
	end
	do
		config.locations = {
			{location = config.location + vector.new(0,1,0), capabilities = "fly-quad-"..objectType.."s", side = "top"},
		}
	end
	configuration.save("flight.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

local stationInfo = {
	type = "flight-base",
	locations = config.locations,
}

base.initialize(config.baseCode, stationInfo)

for i = 1, #config.locations do
	local queue = flight.queue(config.locations[i].side, dispatchDelay)
	base.addFlightBase(queue, config.locations[i].location)
end

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "terminate" then
		print("Stopping")
		return
	end
end
