--object data computer
--this program stores the object data used to present pretty names and images to users.

--initial configuration defaults
local config = {
	-- base master configuration file
	baseCode = "",
	databasePath = "/objectdata",
}

local data = { --keyed by object class, then object hash.
	item = {
		default = {
			name = "Item Name",
			small = {
				{"? ?", "000", "fff"},
				{"? ?", "000", "fff"},
			},
			large = {
				{"??????", "000000", "ffffff"},
				{"?    ?", "000000", "ffffff"},
				{"?    ?", "000000", "ffffff"},
				{"??????", "000000", "ffffff"},
			},
		}
	}
} 

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("data-master.conf") then
	config = configuration.load("data-master.conf")
else
	--initial setup
	print("Initial Setup for Object Database")
	base.setup(config)
	configuration.save("data-master.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

local files = fs.list(config.databasePath)
for i, name in ipairs(files) do
	local class, prefix = string.match(name, "^(%a+)-(.*)")
	if class and prefix then
		if not data[class] then data[class] = {} end
		local contents = configuration.load(fs.combine(config.databasePath, name))
		for suffix, entries in pairs(contents) do
			for damage, info in pairs(entries) do
				local object = {name = prefix..":"..suffix, damage = damage, class = class}
				base.fillObjectData(object)
				data[class][object.hash] = info
			end
		end
	end
end

base.initialize(config.baseCode)

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "rednet_message" then
		local message = event[3]
		if event[4] == "lyq-base-data" and message.baseCode == config.baseCode then
			if message.type == "object_lookup" then
				local object = base.fillObjectData(message.object)
				if data[object.class] and data[object.class][object.hash] then
					rednet.send(event[2], {type = "object_data", data = data[object.class][object.hash], baseCode = config.baseCode}, "lyq-base-data")
				else
					rednet.send(event[2], {type = "no_data", baseCode = config.baseCode}, "lyq-base-data")
				end
			elseif message.type == "object_update" then
				local object = base.fillObjectData(message.object)
				if object.class and object.hash then
					if not data[object.class] then data[object.class] = {} end
					if not data[object.class][object.hash] then data[object.class][object.hash] = {} end
					if data[object.class].default then
						for k, v in pairs(data[object.class].default) do
							data[object.class][object.hash][k] = message.data[k] or data[object.class][object.hash][k] or data[object.class].default[k]
						end
					else
						for k, v in pairs(message.data) do
							data[object.class][object.hash][k] = v
						end
					end
					local prefix = string.match(object.hash, "^([%a%d]+):")
					if prefix then
						local group = {}
						for hash, info in pairs(data[object.class]) do
							if string.match(hash, "^([%a%d]+):") == prefix then
								local object = {class = object.class, hash = hash}
								base.fillObjectData(object)
								local suffix = string.match(object.name, ":(.-)$")
								group[suffix] = info
							end
						end
						configuration.save(fs.combine(config.databasePath, object.class.."-"..prefix), group)
					end
				end
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
