--object data computer
--this program stores the object data used to present pretty names and images to users.

--initial configuration defaults
local config = {
	-- base master configuration file
	baseCode = "",
	databasePath = "/objectdata",
}

local step = 0
local objects = { --keyed by object class, then object hash.
	item = {
		default = {
			name = "Item Name",
			small = {
				{"? ?", "000", "fff"},
				{"? ?", "000", "fff"},
			},
			large = {
				{"??????", "000000", "ffffff"},
				{"?    ?", "000000", "ffffff"},
				{"?    ?", "000000", "ffffff"},
				{"??????", "000000", "ffffff"},
			},
		}
	}
} 

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("data") then error("Could not load data API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("data-master.conf") then
	config = configuration.load("data-master.conf")
else
	--initial setup
	print("Initial Setup for Object Database")
	base.setup(config)
	configuration.save("data-master.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

objects = data.load(config.databasePath)
step = step + 1

base.initialize(config.baseCode)

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "rednet_message" then
		local message = event[3]
		if event[4] == "lyq-base" and message.baseCode == config.baseCode then
			if message.type == "master_online" then
				rednet.broadcast({type = "object_data_step", step = step, baseCode = config.baseCode}, "lyq-base-data")
			end
		elseif event[4] == "lyq-base-data" and message.baseCode == config.baseCode then
			if message.type == "object_lookup" then
				local object = base.fillObjectData(message.object)
				if objects[object.class] and objects[object.class][object.hash] then
					rednet.send(event[2], {type = "object_data", data = objects[object.class][object.hash], baseCode = config.baseCode}, "lyq-base-data")
				else
					rednet.send(event[2], {type = "no_data", baseCode = config.baseCode}, "lyq-base-data")
				end
			elseif message.type == "object_update" then
				local object = base.fillObjectData(message.object)
				if object.class and object.hash then
					if not objects[object.class] then objects[object.class] = {} end
					if not objects[object.class][object.hash] then objects[object.class][object.hash] = {} end
					local changed = false
					local entry = objects[object.class][object.hash]
					if objects[object.class].default then
						for k, v in pairs(objects[object.class].default) do
							local old = entry[k]
							entry[k] = message.objects[k] or entry[k] or objects[object.class].default[k]
							if entry[k] ~= old then changed = true end
						end
					else
						for k, v in pairs(message.objects) do
							if entry[k] ~= v then changed = true end
							entry[k] = v
						end
					end
					if changed then
						local prefix = string.match(object.hash, "^([%a%d]+):")
						if prefix then
							data.save(config.databasePath, objects, object.class, prefix)
							step = step + 1
							rednet.broadcast({type = "object_data_step", step = step, baseCode = config.baseCode}, "lyq-base-data")
						end
					end
				end
			elseif message.type == "object_data" then
				rednet.send(event[2], {type = "object_data_info", data = objects, step = step, baseCode = config.baseCode}, "lyq-base-data")
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
