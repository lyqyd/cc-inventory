--craft master computer
--this program oversees the crafting stations and manages the recipe list.

--initial configuration defaults
local config = {
	--craft master configuration file
	baseCode = "",
	databasePath = "/craftingdata",
}

local recipes = {}
local recipeLookup = {}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("craft-master.conf") then
	config = configuration.load("craft-master.conf")
else
	--initial setup
	print("Initial Setup for Crafting Master")
	base.setup(config)
	configuration.save("craft-master.conf", config)
end

if fs.exists(config.databasePath) then
	recipes = configuration.load(config.databasePath)
	for i, info in ipairs(recipes) do
		if recipeLookup[info.result] then
			table.insert(recipeLookup[info.result], i)
		else
			recipeLookup[info.result] = {i}
		end
	end
end

peripheral.find("modem", function(name) rednet.open(name) end)

local crafters = {}

local clientProtocol = {
	protocol = "lyq-base-craft",
	name = {crafter_online = "Crafting Station", recipe_online = "Recipe Entry Station"},
	online = {crafter_online = true, recipe_online = true},
	offline = {crafter_offline = true, recipe_offline = true},
	list = crafters,
}

local stationInfo = {
	type = "crafting-master",
	locations = {},
}

base.initialize(config.baseCode, stationInfo, nil, clientProtocol)

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "rednet_message" then
		local message = event[3]
		if event[4] == "lyq-base-craft" and message.baseCode == config.baseCode then
			if message.type == "recipe_new" then
				local n = #recipes + 1
				recipes[n] = message.recipe
				local result = base.fillObjectData(message.recipe.result)
				table.insert(recipeLookup[result.hash], n)
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
