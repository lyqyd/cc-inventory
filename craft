--crafting unit
--this program is a dispatchable crafter for the base inventory system.

--initial configuration defaults
local config = {
	--crafter configuration file
	--facing is determined by which direction the turtle is looking.
	facing = 1,
	baseCode = "",
	location = nil,
	locations = {},
}

local slotMap = {5, 6, 7, 9, 10, 11, 13, 14, 15}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("flight") then error("Could not load flight API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("craft.conf") then
	config = configuration.load("craft.conf")
else
	--initial setup
	print("Initial Setup for Crafting Unit")
	while not os.getComputerLabel() do
		print("Please provide a label for this computer.")
		write("> ")
		local label = read()
		if #label >= 1 then
			os.setComputerLabel(label)
			break
		else
			print("A label is required!")
		end
	end
	do
		local loc = vector.new(gps.locate())
		if loc.y == 0 then
			local x, y, z
			repeat
				print("What is this station's X coordinate?")
				print("Use the location of this turtle.")
				write("> ")
				x = tonumber(read())
				if not (x and x == math.floor(x)) then
					print("A valid integer is required!")
					x = nil
				end
			until x
			repeat
				print("What is this station's Y coordinate?")
				print("Use the location of this turtle.")
				write("> ")
				y = tonumber(read())
				if not (y and y == math.floor(y) and y > 0) then
					print("A valid positive integer is required!")
					y = nil
				end
			until y
			repeat
				print("What is this station's Z coordinate?")
				print("Use the location of this turtle.")
				write("> ")
				z = tonumber(read())
				if not (z and z == math.floor(z)) then
					print("A valid integer is required!")
					z = nil
				end
			until z
			loc = vector.new(x, y, z)
		end
		config.location = loc
	end
	while true do
		print("Which direction does this crafting station face?")
		print("Determine the direction by standing behind the turtle and looking in the direction it faces.")
		print("Enter 1 - 4, corresponding to the correct direction:")
		print("1. north      2. east")
		print("3. south      4. west")
		write("> ") 
		local direction = tonumber(read())
		if direction and direction == math.floor(direction) and direction >= 1 and direction <= 4 then
			config.facing = direction
			break
		else
			print("A valid direction is required!")
		end
	end
	do
		local facingVec = {
			{vector.new(0, 0, -1), vector.new(0, 0, 1)},
			{vector.new(1, 0, 0), vector.new(-1, 0, 0)},
			{vector.new(0, 0, 1), vector.new(0, 0, -1)},
			{vector.new(-1, 0, 0), vector.new(1, 0, 0)}
		}
		config.locations = {
			{location = config.location + facingVec[config.facing][1], capabilities = "output-items"},
			{location = config.location, capabilities = "accept-items"},
			{location = config.location + facingVec[config.facing][2], capabilities = "fly-quad-items"},
		}
	end
	while true do
		print("What is the name code for this base?")
		print("Base name codes are used to group and differentiate sites.")
		write("> ")
		local baseCode = read()
		if baseCode and #baseCode > 0 then
			config.baseCode = baseCode
			break
		else
			print("A base name code is required!")
		end
	end
	configuration.save("craft.conf", config)
end

local task

local function checkSlots()
	for i = 1, 9 do
		local item = turtle.getItemDetail(slotMap[i])
		local info = task.slots[i]
		if info then
			if (not item) or info.name ~= item.name or info.damage ~= item.damage or info.count * task.total / task.product ~= item.count then
				return false
			end
		end
	end
	return true
end

local function surplus(i)
	turtle.select(i)
	info = turtle.getItemDetail(i)
	if info then
		turtle.drop()
		base.sendToBaseMaster({type = "object_surplus", objectType = "item", objectInfo = {name = info.name, damage = info.damage, count = info.count}, location = config.locations[1].location})
	end
end

peripheral.find("modem", function(name) rednet.open(name) end)

local serviceProtocol = {
	protocol = "lyq-base-craft",
	name = "crafting",
	online = "crafter_online",
	offline = "crafter_offline",
}

local stationInfo = {
	type = "items-crafter",
	locations = config.locations,
}

base.initialize(config.baseCode, stationInfo, serviceProtocol)

local queue = flight.queue()
base.addFlightBase(queue, config.locations[3].location)

local function communicate()
	while true do
		local event = {base.handleEvents(os.pullEventRaw())}
		if event[1] == "terminate" then
			print("Stopping")
			return
		end
	end
end

local function craft()
	while true do
		local event = {os.pullEventRaw()}
		if event[1] == "rednet_message" and event[4] == "lyq-base-craft" then
			if event[2] == base.getServiceMaster() then
				if event[3].event == "crafting_task" then
					task = event[3].task
					turtle.select(1)
					--create demand for items
					local items = {}
					for i, info in ipairs(task.slots) do
						--find total number of items to request.
						if items[info.name] then
							items[info.name][info.damage] = (items[info.name][info.damage] or 0) + info.count
						else
							items[info.name] = {[info.damage] = info.count}
						end
					end
					for name, damages in pairs(items) do
						for damage, count in pairs(damages) do
							base.sendToBaseMaster({type = "object_required", objectType = "item", objectInfo = {name = name, damage = damage, count = count}, location = config.locations[2].location})
						end
					end
				end
			end
		elseif event[1] == "turtle_inventory" then
			for i = 1, 4 do
				turtle.select(i)
				local item = turtle.getItemDetail(i)
				if task and item then
					local total = 0
					for j, info in ipairs(task.slots) do
						if info.name == item.name and info.damage == item.damage then
							local count = math.min(info.count * task.total / task.product, item.count - total)
							turtle.transferTo(slotMap[j], count)
							total = total + count
							if total == item.count then break end
						end
					end

					if checkSlots() then
						turtle.select(12)
						turtle.craft(task.product)
						surplus(12)
						task = nil
						for j = 1, 9 do
							surplus(slotMap[j])
						end
						base.sendToServiceMaster({type = "task_complete"})
					end
				elseif item then
					surplus(i)
				end
			end
			if not task then
				for i = 5, 16 do
					surplus(i)
				end
			end
		end
	end
end

parallel.waitForAny(communicate, craft)
