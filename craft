--crafting unit
--this program is a dispatchable crafter for the base inventory system.

--initial configuration defaults
local config = {
	--crafter configuration file
	--facing is determined by which direction the turtle is looking.
	facing = 1,
	baseCode = "",
	location = nil,
	locations = {},
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("flight") then error("Could not load flight API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("craft.conf") then
	config = configuration.load("craft.conf")
else
	--initial setup
	print("Initial Setup for Crafting Unit")
	while not os.getComputerLabel() do
		print("Please provide a label for this computer.")
		write("> ")
		local label = read()
		if #label >= 1 then
			os.setComputerLabel(label)
			break
		else
			print("A label is required!")
		end
	end
	do
		local loc = vector.new(gps.locate())
		if loc.y == 0 then
			local x, y, z
			repeat
				print("What is this station's X coordinate?")
				print("Use the location of this turtle.")
				write("> ")
				x = tonumber(read())
				if not (x and x == math.floor(x)) then
					print("A valid integer is required!")
					x = nil
				end
			until x
			repeat
				print("What is this station's Y coordinate?")
				print("Use the location of this turtle.")
				write("> ")
				y = tonumber(read())
				if not (y and y == math.floor(y) and y > 0) then
					print("A valid positive integer is required!")
					y = nil
				end
			until y
			repeat
				print("What is this station's Z coordinate?")
				print("Use the location of this turtle.")
				write("> ")
				z = tonumber(read())
				if not (z and z == math.floor(z)) then
					print("A valid integer is required!")
					z = nil
				end
			until z
			loc = vector.new(x, y, z)
		end
		config.location = loc
	end
	while true do
		print("Which direction does this crafting station face?")
		print("Determine the direction by standing behind the turtle and looking in the direction it faces.")
		print("Enter 1 - 4, corresponding to the correct direction:")
		print("1. north      2. east")
		print("3. south      4. west")
		write("> ") 
		local direction = tonumber(read())
		if direction and direction == math.floor(direction) and direction >= 1 and direction <= 4 then
			config.facing = direction
			break
		else
			print("A valid direction is required!")
		end
	end
	do
		local facingVec = {
			{vector.new(0, 0, -1), vector.new(0, 0, 1)},
			{vector.new(1, 0, 0), vector.new(-1, 0, 0)},
			{vector.new(0, 0, 1), vector.new(0, 0, -1)},
			{vector.new(-1, 0, 0), vector.new(1, 0, 0)}
		}
		config.locations = {
			{location = config.location + facingVec[config.facing][1], capabilities = "output-items"},
			{location = config.location, capabilities = "accept-items"},
			{location = config.location + facingVec[config.facing][2], capabilities = "fly-quad-items"},
		}
	end
	while true do
		print("What is the base name code for this storage system?")
		print("Base name codes are used to group and differentiate inventory system sites.")
		write("> ")
		local baseCode = read()
		if baseCode and #baseCode > 0 then
			config.baseCode = baseCode
			break
		else
			print("A base name code is required!")
		end
	end
	configuration.save("craft.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

local serviceProtocol = {
	protocol = "lyq-base-craft",
	name = "crafting",
	online = "crafter_online",
	offline = "crafter_offline",
}

local stationInfo = {
	type = "items-crafter",
	locations = config.locations,
}

base.initialize(config.baseCode, stationInfo, serviceProtocol)

local queue = flight.queue()

local function communicate()
	while true do
		local event = {queue:handleEvents(base.handleEvents(os.pullEventRaw()))}
		if event[1] == "terminate" then
			print("Stopping")
			return
		end
	end
end

local function craft()
	while true do
		local event = {os.pullEventRaw()}
		if event[1] == "rednet_message" and event[4] == "lyq-base-craft" then
			if event[2] == base.getServiceMaster() then
				if event[3].event == "crafting_task" then
					
				end
			end
		end
	end
end

parallel.waitForAny(communicate, craft)
