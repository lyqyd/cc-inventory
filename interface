--interface computer
--this program is used by players to interact with the system.

--initial configuration defaults
local config = {
	-- base master configuration file
	baseCode = "",
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("interface.conf") then
	config = configuration.load("interface.conf")
else
	--initial setup
	print("Initial Setup for User Interface")
	base.setup(config)
	configuration.save("interface.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

base.initialize(config.baseCode)

local items = {}
local sortedItems = {}
local sorts = {
	count = {
		[1] = function(a, b) return a.count < b.count end,
		[-1] = function(a, b) return a.count > b.count end,
	},
	name = {
		[1] = function(a, b) return a.name < b.name end,
		[-1] = function(a, b) return a.name > b.name end,
	},
}
local sortType, sortDirection = "name", 1

local function rebuildItems()
	local tab, n = {}, 0
	for name, damages in pairs(items) do
		for damage, count in pairs(damages) do
			n = n + 1
			tab[n] = {class = "item", name = name, damage = damage, count = count}
			base.fillObjectData(tab[n])
		end
	end
	sortedItems = tab
	table.sort(sortedItems, sorts[sortType][sortDirection])
end

local function getDisplayCount(count)
	if count < 10000 then
		return tostring(count)
	elseif count < 1000000 then
		--display in k
		count = math.floor(count / 100)
		return tostring(count / 10).."k"
	elseif count < 1000000000 then
		--display in M
		count = math.floor(count / 100000)
		return tostring(count / 10).."M"
	elseif count < 1000000000000 then
		--display in B
		count = math.floor(count / 100000000)
		return tostring(count / 10).."B"
	elseif count < 1000000000000000 then
		--display in T
		count = math.floor(count / 100000000000)
		return tostring(count / 10).."T"
	else
		return "many"
	end
end

local function redraw()
	term.clear()
	term.setCursorPos(1, 1)
	local x, y = term.getSize()
	for i = 1, y do
		term.setCursorPos(2, i)
		local object = sortedItems[i]
		if object then
			term.write(object.name)
			term.setCursorPos(x - 5, i)
			term.write(getDisplayCount(object.count))
		end
	end
end

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "rednet_message" then
		local message = event[3]
		if event[4] == "lyq-base" and message.baseCode == config.baseCode then
			if message.type == "master_online" then
				--get list of all stored items
				base.sendToBaseMaster({type = "all_items"}, "lyq-base-inv")
			end
		elseif event[4] == "lyq-base-inv" and message.baseCode == config.baseCode then
			if message.type == "all_items_info" then
				items = message.info
				rebuildItems()
				redraw()
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
