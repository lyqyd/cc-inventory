--intake unit
--this program is a simple intake system. items are placed in the turtle, then the turtle dumps them in the chest in front of it and calls for a pickup.

--initial configuration defaults
local config = {
	--crafter configuration file
	--facing is determined by which direction the turtle is looking.
	facing = 1,
	baseCode = "",
	location = nil,
	locations = {},
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("intake.conf") then
	config = configuration.load("intake.conf")
else
	--initial setup
	print("Initial Setup for Intake Unit")
	base.setup(config, true, "Determine the direction by standing behind the turtle and looking in the direction it faces.")
	do
		local facingVec = {
			vector.new(0, 0, -1),
			vector.new(1, 0, 0),
			vector.new(0, 0, 1),
			vector.new(-1, 0, 0)
		}
		config.locations = {
			{location = config.location + facingVec[config.facing], capabilities = "output-items"},
		}
	end
	configuration.save("intake.conf", config)
end

local function surplus(i)
	turtle.select(i)
	info = turtle.getItemDetail(i)
	if info then
		turtle.drop()
		base.sendToBaseMaster({type = "object_surplus", object = {class = "item", name = info.name, damage = info.damage, count = info.count}, location = config.locations[1].location})
	end
end

peripheral.find("modem", function(name) rednet.open(name) end)

local stationInfo = {
	type = "items-intake",
	locations = config.locations,
}

base.initialize(config.baseCode, stationInfo)

local function communicate()
	while true do
		local event = {base.handleEvents(os.pullEventRaw())}
		if event[1] == "terminate" then
			print("Stopping")
			return
		end
	end
end

local function dump()
	local function dropAll()
		for i = 1, 16 do
			if turtle.getItemCount(i) > 0 then
				surplus(i)
			end
		end
	end

	while true do
		dropAll()
		local event = {os.pullEventRaw()}
		if event[1] == "turtle_inventory" then
			dropAll()
		end
	end
end

parallel.waitForAny(communicate, dump)
